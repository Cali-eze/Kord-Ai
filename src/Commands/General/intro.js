const emojis = {
    intro: 'üìù',        // Emoji for intro command
    processing: '‚è≥',
    process: 'üëæ',      // Emoji to show processing
    done: '‚úÖ',         // Emoji to indicate completion
    error: '‚ùå'         // Emoji for errors
};

module.exports = {
    usage: ["test"],
    desc: "Send a message word by word.",
    commandType: "General",
    isGroupOnly: false,
    isAdminOnly: false,
    isPrivateOnly: false,
    emoji: emojis.intro, // Emoji metadata

    async execute(sock, m) {
        try {
            await kord.react(m, emojis.processing);
            
            const startTime = Date.now();
            await kord.react(m, emojis.process);
            const latency = Date.now() - startTime;

            const message = ` ú·¥á ü ü·¥èüëã, …™'·¥ç ·¥ã·¥è Ä·¥Ö ·¥Ä…™üí®\n è·¥è·¥ú Ä ·¥Ä ü ü …™…¥ ·¥è…¥·¥á ·¥° ú·¥Ä·¥õs·¥Ä·¥ò·¥ò  ô·¥è·¥õ ·¥ús…™…¥…¢ ·¥° ú…™s·¥ã·¥á ès·¥è·¥Ñ·¥ã·¥á·¥õs  ô·¥Ä…™ ü·¥á ès!\n ü·¥Ä·¥õ·¥á…¥·¥Ñ è => *${latency}ms* \n·¥ús·¥á _.·¥ç·¥á…¥·¥ú_ ·¥õ·¥è s·¥á·¥á ·¥° ú·¥Ä·¥õ …™ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è!üöÄ`;
            const words = message.split(/\s+/);
            let fullMessage = '';

            // Send the initial message
            const sentMsg = await kord.reply(m, ""); // Send an initial empty message to get the message ID
            
            for (const word of words) {
                fullMessage += word + ' ';
                await kord.editMsg(m, sentMsg, fullMessage.trim()); // Update message content word by word
                await new Promise(resolve => setTimeout(resolve, 100)); // Delay between words (100ms)
            }

            await kord.react(m, emojis.done); // Reaction to indicate completion
        } catch (error) {
            await kord.react(m, emojis.error); // Reaction to indicate an error
            console.error('Error executing intro command:', error);
            await kord.reply(m, "‚ùå An error occurred while sending the message.");
        }
    }
};
